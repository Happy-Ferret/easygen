// Copyright (c) 2016 Matt Ho <matt.ho@gmail.com>
//
// Test cases code automatically generated by easygen:
//   https://github.com/go-easygen/easygen
// Editing discouraged.
// Test cases code Copyright (c) 2016 of project
//   https://github.com/stedolan/jq
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package jq_test

import (
	"testing"

	"github.com/savaki/jq"
)

func TestParse(t *testing.T) {
	testCases := map[string]struct {
		In       string
		Op       string
		Expected string
		HasError bool
	}{
		// Tests are groups of three lines: program, input, expected output
		// Blank lines and lines starting with # are ignored
		//
		// Simple value tests to check parser. Input is irrelevant
		//
		"case1": {
			In:       `null`,
			Op:       `true`,
			Expected: `true`,
		},
		"case2": {
			In:       `null`,
			Op:       `false`,
			Expected: `false`,
		},
		"case3": {
			In:       `42`,
			Op:       `null`,
			Expected: `null`,
		},
		"case4": {
			In:       `null`,
			Op:       `1`,
			Expected: `1`,
		},
		"case5": {
			In:       `null`,
			Op:       `-1`,
			Expected: `-1`,
		},
		// FIXME: much more number testing needed
		"case6": {
			In:       `null`,
			Op:       `{}`,
			Expected: `{}`,
		},
		"case7": {
			In:       `null`,
			Op:       `[]`,
			Expected: `[]`,
		},
		"case8": {
			In:       `null`,
			Op:       `{x: -1}`,
			Expected: `{"x": -1}`,
		},
		// The input line starts with a 0xFEFF (byte order mark) codepoint
		// No, there is no reason to have a byte order mark in UTF8 text.
		// But apparently people do, so jq shouldnt break on it.
		// We test escapes by matching them against Unicode codepoints
		// FIXME: more tests needed for weird unicode stuff (e.g. utf16 pairs)
		"case9": {
			In:       `null`,
			Op:       `"Aa\r\n\t\b\f\u03bc"`,
			Expected: `"Aa\u000d\u000a\u0009\u0008\u000c\u03bc"`,
		},
		"case10": {
			In:       `"Aa\r\n\t\b\f\u03bc"`,
			Op:       `.`,
			Expected: `"Aa\u000d\u000a\u0009\u0008\u000c\u03bc"`,
		},
		"case11": {
			In:       `null`,
			Op:       `"inter\("pol" + "ation")"`,
			Expected: `"interpolation"`,
		},
		"case12": {
			In: `<>&'"	`,
			Op: `@text,@json,([1,.] | (@csv, @tsv)),@html,@uri,@sh,@base64`,
			Expected: `<>&'"	`,
		},
		// regression test for #436
		"case13": {
			In:       `"fo√≥bar\n"`,
			Op:       `@base64`,
			Expected: `"Zm/Ds2Jhcgo="`,
		},
		"case14": {
			In:       `"\u03bc"`,
			Op:       `@uri`,
			Expected: `"%CE%BC"`,
		},
		"case15": {
			In:       `"<script>hax</script>"`,
			Op:       `@html "<b>\(.)</b>"`,
			Expected: `"<b>&lt;script&gt;hax&lt;/script&gt;</b>"`,
		},
		"case16": {
			In:       `["foo", 1, ["a", 1, "b", 2, {"foo":"bar"}]]`,
			Op:       `[.[]|tojson|fromjson]`,
			Expected: `["foo",1,["a",1,"b",2,{"foo":"bar"}]]`,
		},
		//
		// Dictionary construction syntax
		//
		"case17": {
			In:       `null`,
			Op:       `{a: 1}`,
			Expected: `{"a":1}`,
		},
		"case18": {
			In:       `{"a":1, "b":2, "c":3, "d":"c"}`,
			Op:       `{a,b,(.d):.a,e:.b}`,
			Expected: `{"a":1, "b":2, "c":1, "e":2}`,
		},
		"case19": {
			In:       `{"a":1, "b":2, "c":3, "a$2":4}`,
			Op:       `{"a",b,"a$\(1+1)"}`,
			Expected: `{"a":1, "b":2, "a$2":4}`,
		},
		//
		// Field access, piping
		//
		"case20": {
			In:       `{"foo": 42, "bar": 43}`,
			Op:       `.foo`,
			Expected: `42`,
		},
		"case21": {
			In:       `{"foo": {"bar": 42}, "bar": "badvalue"}`,
			Op:       `.foo | .bar`,
			Expected: `42`,
		},
		"case22": {
			In:       `{"foo": {"bar": 42}, "bar": "badvalue"}`,
			Op:       `.foo.bar`,
			Expected: `42`,
		},
		"case23": {
			In:       `{"foo_bar": 2}`,
			Op:       `.foo_bar`,
			Expected: `2`,
		},
		"case24": {
			In:       `{"foo": {"bar": 42}, "bar": "badvalue"}`,
			Op:       `.["foo"].bar`,
			Expected: `42`,
		},
		"case25": {
			In:       `{"foo": {"bar": 20}}`,
			Op:       `."foo"."bar"`,
			Expected: `20`,
		},
		"case26": {
			In:       `[1,[2],{"foo":3,"bar":4},{},{"foo":5}]`,
			Op:       `[.[]|.foo?]`,
			Expected: `[3,null,5]`,
		},
		"case27": {
			In:       `[1,[2],[],{"foo":3},{"foo":{"bar":4}},{}]`,
			Op:       `[.[]|.foo?.bar?]`,
			Expected: `[4,null]`,
		},
		"case28": {
			In:       `[1,[[2]],{ "a":[1]}]`,
			Op:       `[..]`,
			Expected: `[[1,[[2]],{"a":[1]}],1,[[2]],[2],2,{"a":[1]},[1],1]`,
		},
		"case29": {
			In:       `[1,null,[],[1,[2,[[3]]]],[{}],[{"a":[1,[2]]}]]`,
			Op:       `[.[]|.[]?]`,
			Expected: `[1,[2,[[3]]],{},{"a":[1,[2]]}]`,
		},
		"case30": {
			In:       `[1,null,true,false,"abcdef",{},{"a":1,"b":2},[],[1,2,3,4,5],[1,2]]`,
			Op:       `[.[]|.[1:3]?]`,
			Expected: `[null,"bc",[],[2,3],[2]]`,
		},
		//
		// Negative array indices
		//
		"case31": {
			In:       `null`,
			Op:       `try (.foo[-1] = 0) catch .`,
			Expected: `"Out of bounds negative array index"`,
		},
		"case32": {
			In:       `null`,
			Op:       `try (.foo[-2] = 0) catch .`,
			Expected: `"Out of bounds negative array index"`,
		},
		"case33": {
			In:       `[0,1,2]`,
			Op:       `.[-1] = 5`,
			Expected: `[0,1,5]`,
		},
		"case34": {
			In:       `[0,1,2]`,
			Op:       `.[-2] = 5`,
			Expected: `[0,5,2]`,
		},
		//
		// Multiple outputs, iteration
		//
		"case35": {
			In:       `[1,2,3]`,
			Op:       `.[]`,
			Expected: `1`,
		},
		"case36": {
			In:       `[]`,
			Op:       `1,1`,
			Expected: `1`,
		},
		"case37": {
			In:       `[]`,
			Op:       `1,.`,
			Expected: `1`,
		},
		"case38": {
			In:       `[2]`,
			Op:       `[.]`,
			Expected: `[[2]]`,
		},
		"case39": {
			In:       `[3]`,
			Op:       `[[2]]`,
			Expected: `[[2]]`,
		},
		"case40": {
			In:       `[2]`,
			Op:       `[{}]`,
			Expected: `[{}]`,
		},
		"case41": {
			In:       `["a"]`,
			Op:       `[.[]]`,
			Expected: `["a"]`,
		},
		"case42": {
			In:       `["a","b"]`,
			Op:       `[(.,1),((.,.[]),(2,3))]`,
			Expected: `[["a","b"],1,["a","b"],"a","b",2,3]`,
		},
		"case43": {
			In:       `[1,2,3]`,
			Op:       `[([5,5][]),.,.[]]`,
			Expected: `[5,5,[1,2,3],1,2,3]`,
		},
		"case44": {
			In:       `null`,
			Op:       `{x: (1,2)},{x:3} | .x`,
			Expected: `1`,
		},
		"case45": {
			In:       `[1,2,3]`,
			Op:       `.[-2]`,
			Expected: `2`,
		},
		"case46": {
			In:       `null`,
			Op:       `[range(0;10)]`,
			Expected: `[0,1,2,3,4,5,6,7,8,9]`,
		},
		"case47": {
			In:       `null`,
			Op:       `[range(0,1;3,4)]`,
			Expected: `[0,1,2, 0,1,2,3, 1,2, 1,2,3]`,
		},
		"case48": {
			In:       `null`,
			Op:       `[range(0;10;3)]`,
			Expected: `[0,3,6,9]`,
		},
		"case49": {
			In:       `null`,
			Op:       `[range(0;10;-1)]`,
			Expected: `[]`,
		},
		"case50": {
			In:       `null`,
			Op:       `[range(0;-5;-1)]`,
			Expected: `[0,-1,-2,-3,-4]`,
		},
		"case51": {
			In:       `null`,
			Op:       `[range(0,1;4,5;1,2)]`,
			Expected: `[0,1,2,3,0,2, 0,1,2,3,4,0,2,4, 1,2,3,1,3, 1,2,3,4,1,3]`,
		},
		"case52": {
			In:       `1`,
			Op:       `[while(.<100; .*2)]`,
			Expected: `[1,2,4,8,16,32,64]`,
		},
		"case53": {
			In:       `[0,1,2]`,
			Op:       `[(label $here | .[] | if .>1 then break $here else . end), "hi!"]`,
			Expected: `[0,1,"hi!"]`,
		},
		"case54": {
			In:       `[0,2,1]`,
			Op:       `[(label $here | .[] | if .>1 then break $here else . end), "hi!"]`,
			Expected: `[0,"hi!"]`,
		},
		"case55": {
			In:       `[1,2,3,4,5]`,
			Op:       `[.[]|[.,1]|until(.[0] < 1; [.[0] - 1, .[1] * .[0]])|.[1]]`,
			Expected: `[1,2,6,24,120]`,
		},
		"case56": {
			In:       `[11,22,33,44,55,66,77,88,99]`,
			Op:       `[label $out | foreach .[] as $item ([3, null]; if .[0] < 1 then break $out else [.[0] -1, $item] end; .[1])]`,
			Expected: `[11,22,33]`,
		},
		"case57": {
			In:       `null`,
			Op:       `[foreach range(5) as $item (0; $item)]`,
			Expected: `[0,1,2,3,4]`,
		},
		"case58": {
			In:       `[[2,1], [5,3], [6,4]]`,
			Op:       `[foreach .[] as [$i, $j] (0; . + $i - $j)]`,
			Expected: `[1,3,5]`,
		},
		"case59": {
			In:       `[{"a":1}, {"b":2}, {"a":3, "b":4}]`,
			Op:       `[foreach .[] as {a:$a} (0; . + $a; -.)]`,
			Expected: `[-1, -1, -4]`,
		},
		"case60": {
			In:       `[11,22,33,44,55,66,77,88,99]`,
			Op:       `[limit(3; .[])]`,
			Expected: `[11,22,33]`,
		},
		"case61": {
			In:       `10`,
			Op:       `[first(range(.)), last(range(.)), nth(0; range(.)), nth(5; range(.)), try nth(-1; range(.)) catch .]`,
			Expected: `[0 9 0 5 nth doesn't support negative indices]`,
		},
		//
		// Check that various builtins evalute all arguments where appropriate,
		// doing cartesian products where appropriate.
		//
		// Check that limit does work for each value produced by n!
		"case62": {
			In:       `null`,
			Op:       `[limit(5,7; range(9))]`,
			Expected: `[0,1,2,3,4,0,1,2,3,4,5,6]`,
		},
		// Same check for nth
		"case63": {
			In:       `null`,
			Op:       `[nth(5,7; range(9;0;-1))]`,
			Expected: `[4,2]`,
		},
		// Same check for range/3
		"case64": {
			In:       `null`,
			Op:       `[range(0,1,2;4,3,2;2,3)]`,
			Expected: `[0,2,0,3,0,2,0,0,0,1,3,1,1,1,1,1,2,2,2,2]`,
		},
		// Same check for range/1
		"case65": {
			In:       `null`,
			Op:       `[range(3,5)]`,
			Expected: `[0,1,2,0,1,2,3,4]`,
		},
		// Same check for index/1, rindex/1, indices/1
		"case66": {
			In:       `"a,b|c,d,e||f,g,h,|,|,i,j"`,
			Op:       `[(index(",","|"), rindex(",","|")), indices(",","|")]`,
			Expected: `[1,3,22,19,[1,5,7,12,14,16,18,20,22],[3,9,10,17,19]]`,
		},
		// Same check for join/1
		"case67": {
			In:       `["a","b","c","d"]`,
			Op:       `join(",","/")`,
			Expected: `"a,b,c,d"`,
		},
		"case68": {
			In:       `[[],[""],["",""],["","",""]]`,
			Op:       `[.[]|join("a")]`,
			Expected: `["","","a","aa"]`,
		},
		// Same check for flatten/1
		"case69": {
			In:       `[0, [1], [[2]], [[[3]]]]`,
			Op:       `flatten(3,2,1)`,
			Expected: `[0,1,2,3]`,
		},
		//
		// Slices
		//
		"case70": {
			In:       `[0,1,2,3,4,5,6]`,
			Op:       `[.[3:2], .[-5:4], .[:-2], .[-2:], .[3:3][1:], .[10:]]`,
			Expected: `[[], [2,3], [0,1,2,3,4], [5,6], [], []]`,
		},
		"case71": {
			In:       `"abcdefghi"`,
			Op:       `[.[3:2], .[-5:4], .[:-2], .[-2:], .[3:3][1:], .[10:]]`,
			Expected: `["","","abcdefg","hi","",""]`,
		},
		"case72": {
			In:       `[0,1,2,3,4,5,6,7]`,
			Op:       `del(.[2:4],.[0],.[-2:])`,
			Expected: `[1,4,5]`,
		},
		"case73": {
			In:       `[0,1,2,3,4,5,6,7]`,
			Op:       `.[2:4] = ([], ["a","b"], ["a","b","c"])`,
			Expected: `[0,1,4,5,6,7]`,
		},
		//
		// Variables
		//
		"case74": {
			In:       `null`,
			Op:       `1 as $x | 2 as $y | [$x,$y,$x]`,
			Expected: `[1,2,1]`,
		},
		"case75": {
			In:       `null`,
			Op:       `[1,2,3][] as $x | [[4,5,6,7][$x]]`,
			Expected: `[5]`,
		},
		"case76": {
			In:       `34324`,
			Op:       `42 as $x | . | . | . + 432 | $x + 1`,
			Expected: `43`,
		},
		"case77": {
			In:       `null`,
			Op:       `1 as $x | [$x,$x,$x as $x | $x]`,
			Expected: `[1,1,1]`,
		},
		"case78": {
			In:       `null`,
			Op:       `[1, {c:3, d:4}] as [$a, {c:$b, b:$c}] | $a, $b, $c`,
			Expected: `1`,
		},
		"case79": {
			In:       `{"as": 1, "str": 2, "exp": 3}`,
			Op:       `. as {as: $kw, "str": $str, ("e"+"x"+"p"): $exp} | [$kw, $str, $exp]`,
			Expected: `[1, 2, 3]`,
		},
		"case80": {
			In:       `[[1], [1, 2, 3]]`,
			Op:       `.[] as [$a, $b] | [$b, $a]`,
			Expected: `[null, 1]`,
		},
		"case81": {
			In:       `[0]`,
			Op:       `. as $i | . as [$i] | $i`,
			Expected: `0`,
		},
		"case82": {
			In:       `[0]`,
			Op:       `. as [$i] | . as $i | $i`,
			Expected: `[0]`,
		},
		// [.,(.[] | {x:.},.),.,.[]]
		//
		// Builtin functions
		//
		"case83": {
			In:       `null`,
			Op:       `1+1`,
			Expected: `2`,
		},
		"case84": {
			In:       `"wtasdf"`,
			Op:       `1+1`,
			Expected: `2.0`,
		},
		"case85": {
			In:       `null`,
			Op:       `2-1`,
			Expected: `1`,
		},
		"case86": {
			In:       `null`,
			Op:       `2-(-1)`,
			Expected: `3`,
		},
		"case87": {
			In:       `"I wonder what this will be?"`,
			Op:       `1e+0+0.001e3`,
			Expected: `20e-1`,
		},
		"case88": {
			In:       `15`,
			Op:       `.+4`,
			Expected: `19.0`,
		},
		"case89": {
			In:       `{"a":42}`,
			Op:       `.+null`,
			Expected: `{"a":42}`,
		},
		"case90": {
			In:       `null`,
			Op:       `null+.`,
			Expected: `null`,
		},
		"case91": {
			In:       `{"a":42}`,
			Op:       `.a+.b`,
			Expected: `42`,
		},
		"case92": {
			In:       `null`,
			Op:       `[1,2,3] + [.]`,
			Expected: `[1,2,3,null]`,
		},
		"case93": {
			In:       `"asdfasdf"`,
			Op:       `{"a":1} + {"b":2} + {"c":3}`,
			Expected: `{"a":1, "b":2, "c":3}`,
		},
		"case94": {
			In:       `"some string"`,
			Op:       `"asdf" + "jkl;" + . + . + .`,
			Expected: `"asdfjkl;some stringsome stringsome string"`,
		},
		"case95": {
			In:       `"\u0000\u0020\u0000"`,
			Op:       `"\u0000\u0020\u0000" + .`,
			Expected: `"\u0000 \u0000\u0000 \u0000"`,
		},
		"case96": {
			In:       `11`,
			Op:       `42 - .`,
			Expected: `31`,
		},
		"case97": {
			In:       `1`,
			Op:       `[1,2,3,4,1] - [.,3]`,
			Expected: `[2,4]`,
		},
		"case98": {
			In:       `4`,
			Op:       `[10 * 20, 20 / .]`,
			Expected: `[200, 5]`,
		},
		"case99": {
			In:       `null`,
			Op:       `1 + 2 * 2 + 10 / 2`,
			Expected: `10`,
		},
		"case100": {
			In:       `null`,
			Op:       `[16 / 4 / 2, 16 / 4 * 2, 16 - 4 - 2, 16 - 4 + 2]`,
			Expected: `[2, 8, 10, 14]`,
		},
		"case101": {
			In:       `null`,
			Op:       `25 % 7`,
			Expected: `4`,
		},
		"case102": {
			In:       `null`,
			Op:       `49732 % 472`,
			Expected: `172`,
		},
		"case103": {
			In:       `4`,
			Op:       `1 + tonumber + ("10" | tonumber)`,
			Expected: `15`,
		},
		"case104": {
			In:       `{"object": {"a":42}, "num":10.0}`,
			Op:       `[{"a":42},.object,10,.num,false,true,null,"b",[1,4]] | .[] as $x | [$x == .[]]`,
			Expected: `[true,  true,  false, false, false, false, false, false, false]`,
		},
		"case105": {
			In:       `[[], {}, [1,2], {"a":42}, "asdf", "\u03bc"]`,
			Op:       `[.[] | length]`,
			Expected: `[0, 0, 2, 1, 4, 1]`,
		},
		"case106": {
			In:       `"asdf\u03bc"`,
			Op:       `utf8bytelength`,
			Expected: `6`,
		},
		"case107": {
			In:       `[[], {}, [1,2], 55, true, false]`,
			Op:       `[.[] | try utf8bytelength catch .]`,
			Expected: `["array ([]) only strings have UTF-8 byte length","object ({}) only strings have UTF-8 byte length","array ([1,2]) only strings have UTF-8 byte length","number (55) only strings have UTF-8 byte length","boolean (true) only strings have UTF-8 byte length","boolean (false) only strings have UTF-8 byte length"]`,
		},
		"case108": {
			In:       `[{}, {"abcd":1,"abc":2,"abcde":3}, {"x":1, "z": 3, "y":2}]`,
			Op:       `map(keys)`,
			Expected: `[[], ["abc","abcd","abcde"], ["x","y","z"]]`,
		},
		"case109": {
			In:       `null`,
			Op:       `[1,2,empty,3,empty,4]`,
			Expected: `[1,2,3,4]`,
		},
		"case110": {
			In:       `[[], [1,2,3], ["a","b","c"], [[3],[4,5],[6]], [{"a":1}, {"b":2}, {"a":3}]]`,
			Op:       `map(add)`,
			Expected: `[null, 6, "abc", [3,4,5,6], {"a":3, "b": 2}]`,
		},
		"case111": {
			In:       `[0,1,2]`,
			Op:       `map_values(.+1)`,
			Expected: `[1,2,3]`,
		},
		//
		// User-defined functions
		// Oh god.
		//
		"case112": {
			In:       `3.0`,
			Op:       `def f: . + 1; def g: def g: . + 100; f | g | f; (f | g), g`,
			Expected: `106.0`,
		},
		"case113": {
			In:       `123412345`,
			Op:       `def f: (1000,2000); f`,
			Expected: `1000`,
		},
		"case114": {
			In:       `[1,2]`,
			Op:       `def f(a;b;c;d;e;f): [a+1,b,c,d,e,f]; f(.[0];.[1];.[0];.[0];.[0];.[0])`,
			Expected: `[2,2,1,1,1,1]`,
		},
		// Test precedence of def vs |
		"case115": {
			In:       `null`,
			Op:       `def a: 0; . | a`,
			Expected: `0`,
		},
		// Many arguments
		"case116": {
			In:       `[0,1,2,3,4,5,6,7,8,9]`,
			Op:       `def f(a;b;c;d;e;f;g;h;i;j): [j,i,h,g,f,e,d,c,b,a]; f(.[0];.[1];.[2];.[3];.[4];.[5];.[6];.[7];.[8];.[9])`,
			Expected: `[9,8,7,6,5,4,3,2,1,0]`,
		},
		"case117": {
			In:       `[1,2,3]`,
			Op:       `([1,2] + [4,5])`,
			Expected: `[1,2,4,5]`,
		},
		"case118": {
			In:       `[1]`,
			Op:       `true`,
			Expected: `true`,
		},
		"case119": {
			In:       `"hello"`,
			Op:       `null,1,null`,
			Expected: `null`,
		},
		"case120": {
			In:       `[5,6]`,
			Op:       `[1,2,3]`,
			Expected: `[1,2,3]`,
		},
		"case121": {
			In:       `[-1.1,1.1,1.9]`,
			Op:       `[.[]|floor]`,
			Expected: `[-2, 1, 1]`,
		},
		"case122": {
			In:       `[4,9]`,
			Op:       `[.[]|sqrt]`,
			Expected: `[2,3]`,
		},
		"case123": {
			In:       `[2,4,4,4,5,5,7,9]`,
			Op:       `(add / length) as $m | map((. - $m) as $d | $d * $d) | add / length | sqrt`,
			Expected: `2`,
		},
		// Should write a test that calls the -lm function from C (or bc(1)) to
		// check that they match the corresponding jq functions.  However,
		// theres so little template code standing between that it suffices to
		// test a handful of these.  The results were checked by eye against
		// bc(1).
		"case124": {
			In:       `1`,
			Op:       `atan * 4 * 1000000|floor / 1000000`,
			Expected: `3.141592`,
		},
		"case125": {
			In:       `null`,
			Op:       `[(3.141592 / 2) * (range(0;20) / 20)|cos * 1000000|floor / 1000000]`,
			Expected: `[1,0.996917,0.987688,0.972369,0.951056,0.923879,0.891006,0.85264,0.809017,0.760406,0.707106,0.649448,0.587785,0.522498,0.45399,0.382683,0.309017,0.233445,0.156434,0.078459]`,
		},
		"case126": {
			In:       `null`,
			Op:       `[(3.141592 / 2) * (range(0;20) / 20)|sin * 1000000|floor / 1000000]`,
			Expected: `[0,0.078459,0.156434,0.233445,0.309016,0.382683,0.45399,0.522498,0.587785,0.649447,0.707106,0.760405,0.809016,0.85264,0.891006,0.923879,0.951056,0.972369,0.987688,0.996917]`,
		},
		"case127": {
			In:       `[1,2,3]`,
			Op:       `def f(x): x | x; f([.], . + [42])`,
			Expected: `[[[1,2,3]]]`,
		},
		// test multiple function arities and redefinition
		"case128": {
			In:       `1`,
			Op:       `def f: .+1; def g: f; def f: .+100; def f(a):a+.+11; [(g|f(20)), f]`,
			Expected: `[33,101]`,
		},
		// test closures and lexical scoping
		"case129": {
			In:       `"more testing"`,
			Op:       `def id(x):x; 2000 as $x | def f(x):1 as $x | id([$x, x, x]); def g(x): 100 as $x | f($x,$x+x); g($x)`,
			Expected: `[1,100,2100.0,100,2100.0]`,
		},
		// test def f($a) syntax
		"case130": {
			In:       `[1,2,3]`,
			Op:       `def x(a;b): a as $a | b as $b | $a + $b; def y($a;$b): $a + $b; def check(a;b): [x(a;b)] == [y(a;b)]; check(.[];.[]*2)`,
			Expected: `true`,
		},
		// test backtracking through function calls and returns
		// this test is *evil*
		"case131": {
			In:       `999999999`,
			Op:       `[[20,10][1,0] as $x | def f: (100,200) as $y | def g: [$x + $y, .]; . + $x | g; f[0] | [f][0][1] | f]`,
			Expected: `[[110.0, 130.0], [210.0, 130.0], [110.0, 230.0], [210.0, 230.0], [120.0, 160.0], [220.0, 160.0], [120.0, 260.0], [220.0, 260.0]]`,
		},
		// test recursion
		"case132": {
			In:       `[1,2,3,4]`,
			Op:       `def fac: if . == 1 then 1 else . * (. - 1 | fac) end; [.[] | fac]`,
			Expected: `[1,2,6,24]`,
		},
		// test stack overflow and reallocation
		// this test is disabled for now, it takes a realllllly long time.
		// def f: if length > 1000 then . else .+[1]|f end; f | length
		// []
		// 1001
		"case133": {
			In:       `[1,2,4]`,
			Op:       `reduce .[] as $x (0; . + $x)`,
			Expected: `7`,
		},
		"case134": {
			In:       `[[2,{"j":1}], [5,{"j":3}], [6,{"j":4}]]`,
			Op:       `reduce .[] as [$i, {j:$j}] (0; . + $i - $j)`,
			Expected: `5`,
		},
		"case135": {
			In:       `null`,
			Op:       `reduce [[1,2,10], [3,4,10]][] as [$i,$j] (0; . + $i * $j)`,
			Expected: `14`,
		},
		"case136": {
			In:       `[1,2,3,4,true,false,1,2,3,4,5]`,
			Op:       `. as $dot|any($dot[];not)`,
			Expected: `true`,
		},
		"case137": {
			In:       `[1,2,3,4,true]`,
			Op:       `. as $dot|any($dot[];not)`,
			Expected: `false`,
		},
		"case138": {
			In:       `[1,2,3,4,true,false,1,2,3,4,5]`,
			Op:       `. as $dot|all($dot[];.)`,
			Expected: `false`,
		},
		"case139": {
			In:       `[1,2,3,4,true]`,
			Op:       `. as $dot|all($dot[];.)`,
			Expected: `true`,
		},
		//
		// Paths
		//
		"case140": {
			In:       `null`,
			Op:       `path(.foo[0,1])`,
			Expected: `["foo", 0]`,
		},
		"case141": {
			In:       `[1,5,3]`,
			Op:       `path(.[] | select(.>3))`,
			Expected: `[1]`,
		},
		"case142": {
			In:       `42`,
			Op:       `path(.)`,
			Expected: `[]`,
		},
		"case143": {
			In:       `{"a":[{"b":0}]}`,
			Op:       `try path(.a | map(select(.b == 0))) catch .`,
			Expected: `"Invalid path expression with result [{\"b\":0}]"`,
		},
		"case144": {
			In:       `{"a":[{"b":0}]}`,
			Op:       `try path(.a | map(select(.b == 0)) | .[0]) catch .`,
			Expected: `"Invalid path expression near attempt to access element 0 of [{\"b\":0}]"`,
		},
		"case145": {
			In:       `{"a":[{"b":0}]}`,
			Op:       `try path(.a | map(select(.b == 0)) | .c) catch .`,
			Expected: `"Invalid path expression near attempt to access element \"c\" of [{\"b\":0}]"`,
		},
		"case146": {
			In:       `{"a":[{"b":0}]}`,
			Op:       `try path(.a | map(select(.b == 0)) | .[]) catch .`,
			Expected: `"Invalid path expression near attempt to iterate through [{\"b\":0}]"`,
		},
		"case147": {
			In:       `{"a":{"b":0}}`,
			Op:       `path(.a[path(.b)[0]])`,
			Expected: `["a","b"]`,
		},
		"case148": {
			In:       `[1,[[],{"a":2}]]`,
			Op:       `[paths]`,
			Expected: `[[0],[1],[1,0],[1,1],[1,1,"a"]]`,
		},
		"case149": {
			In:       `[1,[[],{"a":2}]]`,
			Op:       `[leaf_paths]`,
			Expected: `[[0],[1,1,"a"]]`,
		},
		"case150": {
			In:       `{"bar": 42, "foo": ["a", "b", "c", "d"]}`,
			Op:       `["foo",1] as $p | getpath($p), setpath($p; 20), delpaths([$p])`,
			Expected: `"b"`,
		},
		"case151": {
			In:       `[[0], [0,1], [0,1,2]]`,
			Op:       `map(getpath([2])), map(setpath([2]; 42)), map(delpaths([[2]]))`,
			Expected: `[null, null, 2]`,
		},
		"case152": {
			In:       `[[{"foo":2, "x":1}], [{"bar":2}]]`,
			Op:       `map(delpaths([[0,"foo"]]))`,
			Expected: `[[{"x":1}], [{"bar":2}]]`,
		},
		"case153": {
			In:       `{"bar":false}`,
			Op:       `["foo",1] as $p | getpath($p), setpath($p; 20), delpaths([$p])`,
			Expected: `null`,
		},
		"case154": {
			In:       `[1,2,3]`,
			Op:       `delpaths([[-200]])`,
			Expected: `[1,2,3]`,
		},
		"case155": {
			In:       `{}`,
			Op:       `try delpaths(0) catch .`,
			Expected: `"Paths must be specified as an array"`,
		},
		"case156": {
			In:       `{"foo": [0,1,2,3,4], "bar": [0,1]}`,
			Op:       `del(.), del(empty), del((.foo,.bar,.baz) | .[2,3,0]), del(.foo[0], .bar[0], .foo, .baz.bar[0].x)`,
			Expected: `null`,
		},
		"case157": {
			In:       `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`,
			Op:       `del(.[1], .[-6], .[2], .[-3:9])`,
			Expected: `[0, 3, 5, 6, 9]`,
		},
		//
		// Assignment
		//
		"case158": {
			In:       `{"message": "hello"}`,
			Op:       `.message = "goodbye"`,
			Expected: `{"message": "goodbye"}`,
		},
		"case159": {
			In:       `{"bar":42}`,
			Op:       `.foo = .bar`,
			Expected: `{"foo":42, "bar":42}`,
		},
		"case160": {
			In:       `{"foo": 42}`,
			Op:       `.foo |= .+1`,
			Expected: `{"foo": 43}`,
		},
		"case161": {
			In:       `[1,3,5]`,
			Op:       `.[] += 2, .[] *= 2, .[] -= 2, .[] /= 2, .[] %=2`,
			Expected: `[3,5,7]`,
		},
		"case162": {
			In:       `[-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7]`,
			Op:       `[.[] % 7]`,
			Expected: `[0,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,0]`,
		},
		"case163": {
			In:       `{"foo":2}`,
			Op:       `.foo += .foo`,
			Expected: `{"foo":4}`,
		},
		"case164": {
			In:       `[{"a":1,"b":2}]`,
			Op:       `.[0].a |= {"old":., "new":(.+1)}`,
			Expected: `[{"a":{"old":1, "new":2},"b":2}]`,
		},
		"case165": {
			In:       `[{"a":1,"b":2},{"a":2,"b":4},{"a":7,"b":8}]`,
			Op:       `def inc(x): x |= .+1; inc(.[].a)`,
			Expected: `[{"a":2,"b":2},{"a":3,"b":4},{"a":8,"b":8}]`,
		},
		"case166": {
			In:       `[4]`,
			Op:       `.[2][3] = 1`,
			Expected: `[4, null, [null, null, null, 1]]`,
		},
		"case167": {
			In:       `{"foo":[11], "bar":42}`,
			Op:       `.foo[2].bar = 1`,
			Expected: `{"foo":[11,null,{"bar":1}], "bar":42}`,
		},
		"case168": {
			In:       `[{"a":0},{"a":1}]`,
			Op:       `try ((map(select(.a == 1))[].b) = 10) catch .`,
			Expected: `"Invalid path expression near attempt to iterate through [{\"a\":1}]"`,
		},
		"case169": {
			In:       `[{"a":0},{"a":1}]`,
			Op:       `try ((map(select(.a == 1))[].a) |= .+1) catch .`,
			Expected: `"Invalid path expression near attempt to iterate through [{\"a\":1}]"`,
		},
		"case170": {
			In:       `[0,1,2]`,
			Op:       `def x: .[1,2]; x=10`,
			Expected: `[0,10,10]`,
		},
		"case171": {
			In:       `[0,1,2]`,
			Op:       `try (def x: reverse; x=10) catch .`,
			Expected: `"Invalid path expression with result [2,1,0]"`,
		},
		"case172": {
			In:       `[1,null,Infinity,-Infinity,NaN,-NaN]`,
			Op:       `.[] = 1`,
			Expected: `[1,1,1,1,1,1]`,
		},
		//
		// Conditionals
		//
		"case173": {
			In:       `[{"foo":0},{"foo":1},{"foo":[]},{"foo":true},{"foo":false},{"foo":null},{"foo":"foo"},{}]`,
			Op:       `[.[] | if .foo then "yep" else "nope" end]`,
			Expected: `["yep","yep","yep","yep","nope","nope","yep","nope"]`,
		},
		"case174": {
			In:       `[{"foo":0},{"foo":1},{"foo":[]},{"foo":true},{"foo":false},{"foo":null},{"foo":"foo"},{}]`,
			Op:       `[.[] | if .baz then "strange" elif .foo then "yep" else "nope" end]`,
			Expected: `["yep","yep","yep","yep","nope","nope","yep","nope"]`,
		},
		"case175": {
			In:       `null`,
			Op:       `[if 1,null,2 then 3 else 4 end]`,
			Expected: `[3,4,3]`,
		},
		"case176": {
			In:       `null`,
			Op:       `[if empty then 3 else 4 end]`,
			Expected: `[]`,
		},
		"case177": {
			In:       `null`,
			Op:       `[if 1 then 3,4 else 5 end]`,
			Expected: `[3,4]`,
		},
		"case178": {
			In:       `null`,
			Op:       `[if null then 3 else 5,6 end]`,
			Expected: `[5,6]`,
		},
		"case179": {
			In:       `[{"foo":[1,2], "bar": 42}, {"foo":[1], "bar": null}, {"foo":[null,false,3], "bar": 18}, {"foo":[], "bar":42}, {"foo": [null,false,null], "bar": 41}]`,
			Op:       `[.[] | [.foo[] // .bar]]`,
			Expected: `[[1,2], [1], [3], [42], [41]]`,
		},
		"case180": {
			In:       `["hello",true,false,[false],null]`,
			Op:       `.[] //= .[0]`,
			Expected: `["hello",true,"hello",[false],"hello"]`,
		},
		"case181": {
			In:       `[[true,[]], [false,1], [42,null], [null,false]]`,
			Op:       `.[] | [.[0] and .[1], .[0] or .[1]]`,
			Expected: `[true,true]`,
		},
		"case182": {
			In:       `[1,0,false,null,true,"hello"]`,
			Op:       `[.[] | not]`,
			Expected: `[false,false,true,true,false,false]`,
		},
		// Check numeric comparison binops
		"case183": {
			In:       `{}`,
			Op:       `[10 > 0, 10 > 10, 10 > 20, 10 < 0, 10 < 10, 10 < 20]`,
			Expected: `[true,false,false,false,false,true]`,
		},
		"case184": {
			In:       `{}`,
			Op:       `[10 >= 0, 10 >= 10, 10 >= 20, 10 <= 0, 10 <= 10, 10 <= 20]`,
			Expected: `[true,true,false,false,true,true]`,
		},
		// And some in/equality tests
		"case185": {
			In:       `{}`,
			Op:       `[ 10 == 10, 10 != 10, 10 != 11, 10 == 11]`,
			Expected: `[true,false,true,false]`,
		},
		"case186": {
			In:       `{}`,
			Op:       `["hello" == "hello", "hello" != "hello", "hello" == "world", "hello" != "world" ]`,
			Expected: `[true,false,false,true]`,
		},
		"case187": {
			In:       `{}`,
			Op:       `[[1,2,3] == [1,2,3], [1,2,3] != [1,2,3], [1,2,3] == [4,5,6], [1,2,3] != [4,5,6]]`,
			Expected: `[true,false,false,true]`,
		},
		"case188": {
			In:       `{}`,
			Op:       `[{"foo":42} == {"foo":42},{"foo":42} != {"foo":42}, {"foo":42} != {"bar":42}, {"foo":42} == {"bar":42}]`,
			Expected: `[true,false,true,false]`,
		},
		// ugly complicated thing
		"case189": {
			In:       `{}`,
			Op:       `[{"foo":[1,2,{"bar":18},"world"]} == {"foo":[1,2,{"bar":18},"world"]},{"foo":[1,2,{"bar":18},"world"]} == {"foo":[1,2,{"bar":19},"world"]}]`,
			Expected: `[true,false]`,
		},
		// containment operator
		"case190": {
			In:       `{}`,
			Op:       `[("foo" | contains("foo")), ("foobar" | contains("foo")), ("foo" | contains("foobar"))]`,
			Expected: `[true, true, false]`,
		},
		// Try/catch and general `?` operator
		"case191": {
			In:       `[0,1,2,3]`,
			Op:       `[.[]|try if . == 0 then error("foo") elif . == 1 then .a elif . == 2 then empty else . end catch .]`,
			Expected: `["foo","Cannot index number with string \"a\"",3]`,
		},
		"case192": {
			In:       `[null,true,{"a":1}]`,
			Op:       `[.[]|(.a, .a)?]`,
			Expected: `[null,null,1,1]`,
		},
		"case193": {
			In:       `[null,true,{"a":1}]`,
			Op:       `[[.[]|[.a,.a]]?]`,
			Expected: `[]`,
		},
		"case194": {
			In:       `null`,
			Op:       `try error("\($__loc__)") catch .`,
			Expected: `"{\"file\":\"<top-level>\",\"line\":1}"`,
		},
		// string operations
		"case195": {
			In:       `["fo", "foo", "barfoo", "foobar", "barfoob"]`,
			Op:       `[.[]|startswith("foo")]`,
			Expected: `[false, true, false, true, false]`,
		},
		"case196": {
			In:       `["fo", "foo", "barfoo", "foobar", "barfoob"]`,
			Op:       `[.[]|endswith("foo")]`,
			Expected: `[false, true, true, false, false]`,
		},
		"case197": {
			In:       `["a,b, c, d, e,f",", a,b, c, d, e,f, "]`,
			Op:       `[.[] | split(", ")]`,
			Expected: `[["a,b","c","d","e,f"],["","a,b","c","d","e,f",""]]`,
		},
		"case198": {
			In:       `"abc"`,
			Op:       `split("")`,
			Expected: `["a","b","c"]`,
		},
		"case199": {
			In:       `["fo", "foo", "barfoo", "foobar", "afoo"]`,
			Op:       `[.[]|ltrimstr("foo")]`,
			Expected: `["fo","","barfoo","bar","afoo"]`,
		},
		"case200": {
			In:       `["fo", "foo", "barfoo", "foobar", "foob"]`,
			Op:       `[.[]|rtrimstr("foo")]`,
			Expected: `["fo","","bar","foobar","foob"]`,
		},
		"case201": {
			In:       `"a,bc,def,ghij,klmno"`,
			Op:       `[(index(","), rindex(",")), indices(",")]`,
			Expected: `[1,13,[1,4,8,13]]`,
		},
		"case202": {
			In:       `[0,1,1,2,3,4,1,5]`,
			Op:       `indices(1)`,
			Expected: `[1,2,6]`,
		},
		"case203": {
			In:       `[0,1,2,3,1,4,2,5,1,2,6,7]`,
			Op:       `indices([1,2])`,
			Expected: `[1,8]`,
		},
		"case204": {
			In:       `[1]`,
			Op:       `indices([1,2])`,
			Expected: `[]`,
		},
		"case205": {
			In:       `"a,b, cd,e, fgh, ijkl"`,
			Op:       `indices(", ")`,
			Expected: `[3,9,14]`,
		},
		"case206": {
			In:       `["a, bc, def, ghij, jklmn, a,b, c,d, e,f", "a,b,c,d, e,f,g,h"]`,
			Op:       `[.[]|split(",")]`,
			Expected: `[["a"," bc"," def"," ghij"," jklmn"," a","b"," c","d"," e","f"],["a","b","c","d"," e","f","g","h"]]`,
		},
		"case207": {
			In:       `["a, bc, def, ghij, jklmn, a,b, c,d, e,f", "a,b,c,d, e,f,g,h"]`,
			Op:       `[.[]|split(", ")]`,
			Expected: `[["a","bc","def","ghij","jklmn","a,b","c,d","e,f"],["a,b,c,d","e,f,g,h"]]`,
		},
		"case208": {
			In:       `["a", "ab", "abc"]`,
			Op:       `[.[] * 3]`,
			Expected: `["aaa", "ababab", "abcabcabc"]`,
		},
		"case209": {
			In:       `["a, bc, def, ghij, jklmn, a,b, c,d, e,f", "a,b,c,d, e,f,g,h"]`,
			Op:       `[.[] / ","]`,
			Expected: `[["a"," bc"," def"," ghij"," jklmn"," a","b"," c","d"," e","f"],["a","b","c","d"," e","f","g","h"]]`,
		},
		"case210": {
			In:       `["a, bc, def, ghij, jklmn, a,b, c,d, e,f", "a,b,c,d, e,f,g,h"]`,
			Op:       `[.[] / ", "]`,
			Expected: `[["a","bc","def","ghij","jklmn","a,b","c,d","e,f"],["a,b,c,d","e,f,g,h"]]`,
		},
		"case211": {
			In:       `[[[],[]], [[1,2,3], [1,2]], [[1,2,3], [3,1]], [[1,2,3], [4]], [[1,2,3], [1,4]]]`,
			Op:       `map(.[1] as $needle | .[0] | contains($needle))`,
			Expected: `[true, true, true, false, false]`,
		},
		"case212": {
			In:       `[[["foobar", "foobaz"], ["baz", "bar"]], [["foobar", "foobaz"], ["foo"]], [["foobar", "foobaz"], ["blap"]]]`,
			Op:       `map(.[1] as $needle | .[0] | contains($needle))`,
			Expected: `[true, true, false]`,
		},
		"case213": {
			In:       `{}`,
			Op:       `[({foo: 12, bar:13} | contains({foo: 12})), ({foo: 12} | contains({})), ({foo: 12, bar:13} | contains({baz:14}))]`,
			Expected: `[true, true, false]`,
		},
		"case214": {
			In:       `{}`,
			Op:       `{foo: {baz: 12, blap: {bar: 13}}, bar: 14} | contains({bar: 14, foo: {blap: {}}})`,
			Expected: `true`,
		},
		"case215": {
			In:       `{}`,
			Op:       `{foo: {baz: 12, blap: {bar: 13}}, bar: 14} | contains({bar: 14, foo: {blap: {bar: 14}}})`,
			Expected: `false`,
		},
		"case216": {
			In:       `[42,[2,5,3,11],10,{"a":42,"b":2},{"a":42},true,2,[2,6],"hello",null,[2,5,6],{"a":[],"b":1},"abc","ab",[3,10],{},false,"abcd",null]`,
			Op:       `sort`,
			Expected: `[null,null,false,true,2,10,42,"ab","abc","abcd","hello",[2,5,3,11],[2,5,6],[2,6],[3,10],{},{"a":42},{"a":42,"b":2},{"a":[],"b":1}]`,
		},
		"case217": {
			In:       `[{"a": 1, "b": 4, "c": 14}, {"a": 4, "b": 1, "c": 3}, {"a": 1, "b": 4, "c": 3}, {"a": 0, "b": 2, "c": 43}]`,
			Op:       `(sort_by(.b) | sort_by(.a)), sort_by(.a, .b), sort_by(.b, .c), group_by(.b), group_by(.a + .b - .c == 2)`,
			Expected: `[{"a": 0, "b": 2, "c": 43}, {"a": 1, "b": 4, "c": 14}, {"a": 1, "b": 4, "c": 3}, {"a": 4, "b": 1, "c": 3}]`,
		},
		"case218": {
			In:       `[1,2,5,3,5,3,1,3]`,
			Op:       `unique`,
			Expected: `[1,2,3,5]`,
		},
		"case219": {
			In:       `[]`,
			Op:       `unique`,
			Expected: `[]`,
		},
		"case220": {
			In:       `[[4,2,"a"],[3,1,"a"],[2,4,"a"],[1,3,"a"]]`,
			Op:       `[min, max, min_by(.[1]), max_by(.[1]), min_by(.[2]), max_by(.[2])]`,
			Expected: `[[1,3,"a"],[4,2,"a"],[3,1,"a"],[2,4,"a"],[4,2,"a"],[1,3,"a"]]`,
		},
		"case221": {
			In:       `[]`,
			Op:       `[min,max,min_by(.),max_by(.)]`,
			Expected: `[null,null,null,null]`,
		},
		"case222": {
			In:       `{"foo":{"bar":4},"baz":"bar"}`,
			Op:       `.foo[.baz]`,
			Expected: `4`,
		},
		"case223": {
			In:       `[{"error":true}]`,
			Op:       `.[] | .error = "no, it's OK"`,
			Expected: `map[error:no, it's OK]`,
		},
		"case224": {
			In:       `null`,
			Op:       `[{a:1}] | .[] | .a=999`,
			Expected: `{"a": 999}`,
		},
		"case225": {
			In:       `{"a": 1, "b": 2}`,
			Op:       `to_entries`,
			Expected: `[{"key":"a", "value":1}, {"key":"b", "value":2}]`,
		},
		"case226": {
			In:       `[{"key":"a", "value":1}, {"Key":"b", "Value":2}, {"name":"c", "value":3}, {"Name":"d", "Value":4}]`,
			Op:       `from_entries`,
			Expected: `{"a": 1, "b": 2, "c": 3, "d": 4}`,
		},
		"case227": {
			In:       `{"a": 1, "b": 2}`,
			Op:       `with_entries(.key |= "KEY_" + .)`,
			Expected: `{"KEY_a": 1, "KEY_b": 2}`,
		},
		"case228": {
			In:       `[{"foo": 42}, {}]`,
			Op:       `map(has("foo"))`,
			Expected: `[true, false]`,
		},
		"case229": {
			In:       `[[0,1], ["a","b","c"]]`,
			Op:       `map(has(2))`,
			Expected: `[false, true]`,
		},
		"case230": {
			In:       `[42,3,35]`,
			Op:       `keys`,
			Expected: `[0,1,2]`,
		},
		"case231": {
			In:       `1000000000000000000`,
			Op:       `[][.]`,
			Expected: `null`,
		},
		"case232": {
			In:       `[-1, 1, 2, 3, 1000000000000000000]`,
			Op:       `map([1,2][0:.])`,
			Expected: `[[1], [1], [1,2], [1,2], [1,2]]`,
		},
		// Test recursive object merge
		"case233": {
			In:       `{"k": {"a": 0,"c": 3}}`,
			Op:       `{"k": {"a": 1, "b": 2}} * .`,
			Expected: `{"k": {"a": 0, "b": 2, "c": 3}}`,
		},
		"case234": {
			In:       `{"k": {"a": 0,"c": 3}, "hello": 1}`,
			Op:       `{"k": {"a": 1, "b": 2}, "hello": {"x": 1}} * .`,
			Expected: `{"k": {"a": 0, "b": 2, "c": 3}, "hello": 1}`,
		},
		"case235": {
			In:       `{"k": {"a": 0,"c": 3}, "hello": {"x": 1}}`,
			Op:       `{"k": {"a": 1, "b": 2}, "hello": 1} * .`,
			Expected: `{"k": {"a": 0, "b": 2, "c": 3}, "hello": {"x": 1}}`,
		},
		"case236": {
			In:       `{"a": {"b": 2}, "c": {"d": 3, "f": 9}}`,
			Op:       `{"a": {"b": 1}, "c": {"d": 2}, "e": 5} * .`,
			Expected: `{"a": {"b": 2}, "c": {"d": 3, "f": 9}, "e": 5}`,
		},
		"case237": {
			In:       `[1,2,"foo",[],[3,[]],{},true,false,null]`,
			Op:       `[.[]|arrays]`,
			Expected: `[[],[3,[]]]`,
		},
		"case238": {
			In:       `[1,2,"foo",[],[3,[]],{},true,false,null]`,
			Op:       `[.[]|objects]`,
			Expected: `[{}]`,
		},
		"case239": {
			In:       `[1,2,"foo",[],[3,[]],{},true,false,null]`,
			Op:       `[.[]|iterables]`,
			Expected: `[[],[3,[]],{}]`,
		},
		"case240": {
			In:       `[1,2,"foo",[],[3,[]],{},true,false,null]`,
			Op:       `[.[]|scalars]`,
			Expected: `[1,2,"foo",true,false,null]`,
		},
		"case241": {
			In:       `[1,2,"foo",[],[3,[]],{},true,false,null]`,
			Op:       `[.[]|values]`,
			Expected: `[1,2,"foo",[],[3,[]],{},true,false]`,
		},
		"case242": {
			In:       `[1,2,"foo",[],[3,[]],{},true,false,null]`,
			Op:       `[.[]|booleans]`,
			Expected: `[true,false]`,
		},
		"case243": {
			In:       `[1,2,"foo",[],[3,[]],{},true,false,null]`,
			Op:       `[.[]|nulls]`,
			Expected: `[null]`,
		},
		"case244": {
			In:       `[0, [1], [[2]], [[[3]]]]`,
			Op:       `flatten`,
			Expected: `[0, 1, 2, 3]`,
		},
		"case245": {
			In:       `[0, [1], [[2]], [[[3]]]]`,
			Op:       `flatten(0)`,
			Expected: `[0, [1], [[2]], [[[3]]]]`,
		},
		"case246": {
			In:       `[0, [1], [[2]], [[[3]]]]`,
			Op:       `flatten(2)`,
			Expected: `[0, 1, 2, [3]]`,
		},
		"case247": {
			In:       `[0, [1, [2]], [1, [[3], 2]]]`,
			Op:       `flatten(2)`,
			Expected: `[0, 1, 2, 1, [3], 2]`,
		},
		"case248": {
			In:       `[0, [1], [[2]], [[[3]]]]`,
			Op:       `try flatten(-1) catch .`,
			Expected: `"flatten depth must not be negative"`,
		},
		"case249": {
			In:       `[[1], [2,3]]`,
			Op:       `transpose`,
			Expected: `[[1,2],[null,3]]`,
		},
		"case250": {
			In:       `"useful but not for √©"`,
			Op:       `ascii_upcase`,
			Expected: `"USEFUL BUT NOT FOR √©"`,
		},
		"case251": {
			In:       `[1,2,3]`,
			Op:       `bsearch(4)`,
			Expected: `-4`,
		},
		// strptime tests are in optional.test
		"case252": {
			In:       `[2015,2,5,23,51,47,4,63]`,
			Op:       `strftime("%Y-%m-%dT%H:%M:%SZ")`,
			Expected: `"2015-03-05T23:51:47Z"`,
		},
		"case253": {
			In:       `1435677542.822351`,
			Op:       `strftime("%A, %B %d, %Y")`,
			Expected: `"Tuesday, June 30, 2015"`,
		},
		"case254": {
			In:       `1425599507`,
			Op:       `gmtime`,
			Expected: `[2015,2,5,23,51,47,4,63]`,
		},
		// module system
		"case255": {
			In:       `null`,
			Op:       `import "a" as foo; import "b" as bar; def fooa: foo::a; [fooa, bar::a, bar::b, foo::a]`,
			Expected: `["a","b","c","a"]`,
		},
		"case256": {
			In:       `null`,
			Op:       `import "c" as foo; [foo::a, foo::c]`,
			Expected: `[0,"acmehbah"]`,
		},
		"case257": {
			In:       `null`,
			Op:       `include "c"; [a, c]`,
			Expected: `[0,"acmehbah"]`,
		},
		"case258": {
			In:       `"c"`,
			Op:       `modulemeta`,
			Expected: `{"whatever":null,"deps":[{"as":"foo","is_data":false,"relpath":"a"},{"search":"./","as":"d","is_data":false,"relpath":"d"},{"search":"./","as":"d2","is_data":false,"relpath":"d"},{"search":"./../lib/jq","as":"e","is_data":false,"relpath":"e"},{"search":"./../lib/jq","as":"f","is_data":false,"relpath":"f"},{"as":"d","is_data":true,"relpath":"data"}]}`,
		},
		"case259": {
			In:       `null`,
			Op:       `import "test_bind_order" as check; check::check`,
			Expected: `true`,
		},
		"case260": {
			In:       `"very-long-string"`,
			Op:       `try -. catch .`,
			Expected: `"string (\"very-long-...) cannot be negated"`,
		},
		"case261": {
			In:       `["1",2,true,false,3.4]`,
			Op:       `join(",")`,
			Expected: `"1,2,true,false,3.4"`,
		},
		"case262": {
			In:       `[[], [null], [null,null], [null,null,null]]`,
			Op:       `.[] | join(",")`,
			Expected: `""`,
		},
		"case263": {
			In:       `[["a",null], [null,"a"]]`,
			Op:       `.[] | join(",")`,
			Expected: `"a,"`,
		},
		"case264": {
			In:       `["1","2",{"a":{"b":{"c":33}}}]`,
			Op:       `try join(",") catch .`,
			Expected: `"string (\"1,2,\") and object ({\"a\":{\"b\":{...) cannot be added"`,
		},
		"case265": {
			In:       `["1","2",[3,4,5]]`,
			Op:       `try join(",") catch .`,
			Expected: `"string (\"1,2,\") and array ([3,4,5]) cannot be added"`,
		},
		"case266": {
			In:       `null`,
			Op:       `{if:0,and:1,or:2,then:3,else:4,elif:5,end:6,as:7,def:8,reduce:9,foreach:10,try:11,catch:12,label:13,import:14,include:15,module:16}`,
			Expected: `{"if":0,"and":1,"or":2,"then":3,"else":4,"elif":5,"end":6,"as":7,"def":8,"reduce":9,"foreach":10,"try":11,"catch":12,"label":13,"import":14,"include":15,"module":16}`,
		},
		"case267": {
			In:       `0`,
			Op:       `try (1/.) catch .`,
			Expected: `"number (1) and number (0) cannot be divided because the divisor is zero"`,
		},
		"case268": {
			In:       `0`,
			Op:       `try (1%.) catch .`,
			Expected: `"number (1) and number (0) cannot be divided (remainder) because the divisor is zero"`,
		},
		// Basic numbers tests: integers, powers of two
		"case269": {
			In:       `null`,
			Op:       `[range(-52;52;1)] as $powers | [$powers[]|pow(2;.)|log2] == $powers`,
			Expected: `true`,
		},
		"case270": {
			In:       `null`,
			Op:       `[range(-99/2;99/2;1)] as $orig | [$orig[]|pow(2;.)|log2] as $back | ($orig|keys)[]|. as $k | (($orig|.[$k])-($back|.[$k]))|if . < 0 then . * -1 else . end|select(.>.00005)`,
			Expected: ``,
		},
		"case271": {
			In:       `null`,
			Op:       `(.[{}] = 0)?`,
			Expected: ``,
		},
	}

	for label, tc := range testCases {
		t.Run(label, func(t *testing.T) {
			op, err := jq.Parse(tc.Op)
			if err != nil {
				t.FailNow()
			}

			data, err := op.Apply([]byte(tc.In))
			if tc.HasError {
				if err == nil {
					t.FailNow()
				}
			} else {
				if string(data) != tc.Expected {
					t.FailNow()
				}
				if err != nil {
					t.FailNow()
				}
			}
		})
	}
}
