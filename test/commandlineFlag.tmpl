// !!! !!!
// WARNING: Code automatically generated. Editing discouraged.
// !!! !!!

package {{.PackageName}}

import (
	"flag"
	"fmt"
	"os"
)

////////////////////////////////////////////////////////////////////////////
// Constant and data type/structure definitions

const progname = "{{.ProgramName}}" // os.Args[0]

// The {{.StructName}} struct defines the structure to hold the commandline values
type {{.StructName}} struct { {{range .Options}}
	{{.Name}}		{{.Type}}	// {{.Usage}}{{end}}
}

////////////////////////////////////////////////////////////////////////////
// Global variables definitions

// {{.StructVar}} holds the actual values from the command line paramters
var {{.StructVar}} {{.StructName}} 

////////////////////////////////////////////////////////////////////////////
// Commandline definitions

func init() {

	// set default values for command line paramters {{range .Options}}
	flag.{{ck2uc .Type}}Var(&{{$.StructVar}}.{{.Name}}, "{{.Flag}}", {{.Value}},
		"{{.Usage}}"){{end}}

	// Now override those default values from environment variables {{range .Options}}{{if eq .Type "string" }}{{$envVar := printf "%s_%s" (ck2ss $.ProgramName) (ck2ss .Flag)}}
	if len({{$.StructVar}}.{{.Name}}) == 0 ||
		len(os.Getenv("{{$envVar}}")) != 0 {
		{{$.StructVar}}.{{.Name}} = os.Getenv("{{$envVar}}")
	} {{end}}{{end}}

}

// The Usage function shows help on commandline usage
func Usage() {
	fmt.Fprintf(os.Stderr,
		"{{.UsageLead}}",
		progname)
	flag.PrintDefaults()
	fmt.Fprintf(os.Stderr,
		"{{.UsageEnd}}")
	os.Exit(0)
}

